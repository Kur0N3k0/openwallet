<%-include('./header')%>
    <body>
        <div class="container content">
            <div class="row h-100 justify-content-center align-items-center">
                <div class="row">
                    <div class="col w-25">
                        <div class="row text-center" id="nick">
                            <h2>
                                <span id="user-nick"><%= user.nick %></span>
                                <span id="interest" style="cursor:pointer">⭐️</span>
                            </h2>
                        </div>
                        <div class="row text-center" id="chart">
                            <canvas id="canvas" height="400"></canvas>
                        </div>
                        <div class="row text-center profit-diff">
                            <span>전일대비 증감: 0</span>
                        </div>
                        <div class="row">
                            <div class="col w-25 currency_table">
                                
                            </div>
                        </div>
                        <p></p>
                        <div class="row justify-content-center align-items-center">
                            <div class="col-2"></div>
                            <div class="col">
                                <ins class="adsbygoogle"
                                    style="display:inline-block;width:100%;height:90px"
                                    data-ad-client="ca-pub-8915143481493434"
                                    data-ad-slot="9212813481">
                                </ins>
                            </div>
                            <div class="col-2"></div>
                        </div>
                    </div>
                </div>
            </div>
<%-include('./footer-user')%>
    <script>
        window.chartColors = {
            red: 'rgb(255, 99, 132)',
            orange: 'rgb(255, 159, 64)',
            yellow: 'rgb(255, 205, 86)',
            green: 'rgb(75, 192, 192)',
            blue: 'rgb(54, 162, 235)',
            purple: 'rgb(153, 102, 255)',
            grey: 'rgb(201, 203, 207)'
        };

        function getFormatDate(date){
            var year = date.getFullYear();
            var month = (1 + date.getMonth());
            month = month >= 10 ? month : '0' + month;
            var day = date.getDate();
            day = day >= 10 ? day : '0' + day;
            return year + '-' + month + '-' + day;
        }

        let date = new Date()
        let labels = []
        for(let i = 0; i < 30; i++) {
            labels.push(getFormatDate(date).substr(5))
            date.setDate(date.getDate() - 1)
        }
        labels = labels.reverse()

        var config = {
            type: 'line',
            data: {
                labels: labels,
                datasets: [{
                    label: '<%= user.nick %>',
                    backgroundColor: window.chartColors.blue,
                    borderColor: window.chartColors.blue,
                    data: [],
                    fill: false,
                    lineTension: 0
                }]
            },
            options: {
                responsive: false,
                title: {
                    display: true,
                    text: 'Daily Settlement',
                    fontColor: 'white'
                },
                tooltips: {
                    mode: 'index',
                    intersect: false,
                },
                hover: {
                    mode: 'nearest',
                    intersect: true
                },
                scales: {
                    xAxes: [{
                        display: true,
                        scaleLabel: {
                            display: true,
                            fontColor: 'white'
                        }
                    }],
                    yAxes: [{
                        display: true,
                        scaleLabel: {
                            display: true,
                            fontColor: 'white'
                        }
                    }]
                }
            }
        };

        function drawSettlement() {
            $.ajax({
                method: "POST",
                url: "/settlement/<%= user.nick %>",
                contentType: "application/json",
                dataType: "json",
                data: JSON.stringify({
                    date: getFormatDate(new Date()),
                    limit: 30
                }),
                success: (data) => {
                    if(data.error) {
                        alert("에러가 발생했습니다.")
                        return
                    }

                    config.data.datasets[0].data = []
                    config.data.datasets[0].data.length = 30
                    config.data.datasets[0].data.fill(0, 0, 30)

                    for(var i = 0; i < data.length; i++) {
                        config.data.datasets[0].data[29 - i] = data[i].balance
                    }

                    diff = config.data.datasets[0].data[29] - config.data.datasets[0].data[28]
                    percent = (diff / config.data.datasets[0].data[28] * 100).toFixed(2)
                    $(".profit-diff").html(`<h4>전일대비 증감: ${diff} (${percent}%)</h4>`)

                    var ctx = document.getElementById('canvas').getContext('2d')
                    window.myLine = new Chart(ctx, config)
                }
            })
        }

        drawSettlement()

        $(() => {
            function Snackbar(msg) {
                var x = document.getElementById("snackbar");
                x.className = "show";
                x.textContent = msg;
                setTimeout(function () { x.className = x.className.replace("show", ""); }, 3000);
            }

            $("#interest").click(() => {
                const nick = $("#user-nick").text()
                localStorage.setItem("interest-user", nick)
                Snackbar("관심 유저가 설정되었습니다.")
            })

            var wallet = {}

            function uuidv4() {
                return ([1e7]+-1e3+-4e3+-8e3+-1e11).replace(/[018]/g, c =>
                    (c ^ crypto.getRandomValues(new Uint8Array(1))[0] & 15 >> c / 4).toString(16)
                )
            }

            const options = {method: 'GET'};

            var preferedMarket = {}
            function setPreferedMarket(markets) {
                let mkt = {
                    "BTC": [], "KRW": [], "USDT": []
                }
                markets.forEach((market) => {
                    mktCode = market.market.substr(0, market.market.indexOf("-"))
                    mktData = market.market.substr(market.market.indexOf("-") + 1)
                    mkt[mktCode].push(mktData)
                })

                mkt.KRW.forEach((item) => {
                    mkt.BTC = mkt.BTC.filter((x) => x !== item)
                    mkt.USDT = mkt.USDT.filter((x) => x !== item)

                    preferedMarket[item] = "KRW"
                })

                mkt.BTC.forEach((item) => {
                    preferedMarket[item] = "BTC"
                })

                mkt.USDT.forEach((item) => {
                    preferedMarket[item] = "USDT"
                })
            }

            fetch('https://api.upbit.com/v1/market/all?isDetails=false', options)
            .then(response => response.text())
            .then(response => setPreferedMarket(JSON.parse(response)))
            .catch(err => console.error(err));

            const upbitBTC = new WebSocket("wss://api.upbit.com/websocket/v1")
            let Exchange = {}
            upbitBTC.onopen = () => {
                upbitBTC.send(JSON.stringify([{ "ticket": uuidv4() },
                    {
                        "type": "ticker",
                        "codes": [ "KRW-BTC" ],
                    }]))
            }
            upbitBTC.onmessage = (evt) => {
                const reader = new FileReader()
                reader.onload = () => {
                    const tick = JSON.parse(reader.result)
                    Exchange[tick.code.substr(tick.code.indexOf("-")+1)] = tick.trade_price
                }
                reader.readAsText(evt.data)
            }

            const upbit = new WebSocket("wss://api.upbit.com/websocket/v1")
            
            const socket = io()
            socket.on('wallet', (cwallet) => {
                wallet = {}
                ccwallet = cwallet.filter(item => item.currency != "KRW")
                // if(Math.floor(Math.random() * 2) % 2)
                    // cwallet = cwallet.filter(item => item.currency != "DOGE")
                    ccwallet.forEach((item) => {
                    wallet[item.currency] = {
                        avg_buy_price: item.avg_buy_price,
                        balance: parseFloat(item.balance) + parseFloat(item.locked),
                    }
                })
                upbit.send(JSON.stringify([
                    { "ticket": uuidv4() },
                    {
                        "type": "ticker",
                        "codes": Object.keys(wallet).map((item) => preferedMarket[item] + "-" + item)
                    }
                ]))

                $("div[class*=currency-]").map((_, item) => {
                    flag = false
                    Object.keys(wallet).map((key) => {
                        if($(item).hasClass(`currency-${key}`)) {
                            flag = true
                        }
                    })
                    if(!flag)
                        $(item).remove()
                })

                const krw = cwallet.filter(item => item.currency == "KRW")[0]
                const amount = Math.floor(parseFloat(krw.balance) + parseFloat(krw.locked))

                if($(".KRW").length === 0) {
                    $(".currency_table").append(`
                    <div class="row currency KRW">
                        <div class="row">
                            <div class="col w-25 text-end">
                                <span class="code">KRW</span>
                            </div>
                            <div class="col w-25 text-end">
                                <span class="profit">${amount.toLocaleString()}</span>
                            </div>
                            <div class="col w-25 text-start">
                            </div>
                        </div>
                    </div>
                    `)
                } else {
                    $(".KRW").html(`
                    <div class="row">
                        <div class="col w-25 text-end">
                            <span class="code">KRW</span>
                        </div>
                        <div class="col w-25 text-end">
                            <span class="profit">${amount.toLocaleString()}</span>
                        </div>
                        <div class="col w-25 text-start">
                        </div>
                    </div>
                    `)
                }
                
            })

            upbit.onmessage = (evt) => {
                const reader = new FileReader()
                reader.onload = () => {
                    const tick = JSON.parse(reader.result)
                    if(tick.error)
                        return
                    
                    var exch = tick.code.substr(0, tick.code.indexOf("-"))
                    var code = tick.code.substr(tick.code.indexOf("-")+1)
                    var price = tick.trade_price

                    if(wallet[code] === undefined)
                        return

                    if(exch === "BTC")
                        price *= Exchange["BTC"]

                    var startPrice = wallet[code].avg_buy_price * wallet[code].balance
                    var afterPrice = price * wallet[code].balance

                    var profit = Math.round(afterPrice - startPrice)
                    var percentage = afterPrice > startPrice ? (afterPrice / startPrice) * 100 - 100 : -(1 - afterPrice / startPrice) * 100
                    percentage = percentage.toFixed(2)

                    if(percentage > 0) {
                        color = "red"
                    } else {
                        color = "blue"
                    }

                    if($(`.currency-${code}`).length !== 0) {
                        $(`.currency-${code}`).html(`
                        <div class="row">
                            <div class="col w-25 text-end">
                                <span class="code">${code}</span>
                            </div>
                            <div class="col w-25 text-end">
                                <span class="profit">${profit.toLocaleString()}</span>
                            </div>
                            <div class="col w-25 text-start">
                                <span class="${color}">(${percentage}%)</span>
                            </div>
                        </div>
                        `)
                    } else {
                        if($(".donation").length !== 0) {
                            $(".donation").remove()
                        }

                        $(".currency_table").append(`
                        <div class="row currency currency-${code}">
                            <div class="row">
                                <div class="col w-25 text-end">
                                    <span class="code">${code}</span>
                                </div>
                                <div class="col w-25 text-end">
                                    <span class="profit">${profit.toLocaleString()}</span>
                                </div>
                                <div class="col w-25 text-start">
                                    <span class="${color}">(${percentage}%)</span>
                                </div>
                            </div>
                        </div>
                        `)

                        // $(".currency_table").append(`
                        // <div class="row donation" style="padding-top:50px; padding-bottom: 70px;">
                        //     <div class="text-center">
                        //         <h3>Donation</h3>
                        //     </div>
                        //     <div class="text-center">
                        //         <img src="/static/images/BTC.svg" width="32" height="32"> 39Fsbw3dXUbuXyQXdc6oM7z5SvvAkkRcwf
                        //     </div>
                        //     <div class="text-center">
                        //         <img src="/static/images/MBL.png" widht="32" height="32"> ANXZTXH7rV94rAC3yYmNs6zYeFzTHaKsFT
                        //     </div>
                        // </div>
                        // `)
                    }
                }
                reader.readAsText(evt.data)
            }

            socket.on('error', () => {
                alert("올바른 Access/Secret key를 입력해주세요.")
                location = "/"
            })
            
            setInterval(() => {
                socket.emit('wallet', {
                    nick:"<%= user.nick %>"
                })
            }, 1000)
        })
    </script>
</html>