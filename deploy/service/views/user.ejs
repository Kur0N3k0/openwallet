<html>
    <head>
        <title><%= user.nick %>'s Wallet - coin.ltra.cc</title>
        <meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
        <meta name="viewport" content="width=device-width, initial-scale=1.0">
        <meta property="og:title" content="Wallet - coin.ltra.cc"/>
        <meta property="og:url" content="https://coin.ltra.cc/user/<%= user.nick %>"/>
        <meta property="og:image" content="/static/images/banner.png"/>
        <meta property="og:description" content="<%= user.nick %>'s Wallet"/>
        <link rel="preconnect" href="https://fonts.gstatic.com">
        <link href="https://fonts.googleapis.com/css2?family=Raleway:wght@500&family=Ubuntu:wght@500&display=swap" rel="stylesheet">
        <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.0.0-beta3/dist/css/bootstrap.min.css" rel="stylesheet" integrity="sha384-eOJMYsd53ii+scO/bJGFsiCZc+5NDVN2yr8+0RDqr0Ql0h+rP48ckxlpbzKgwra6" crossorigin="anonymous">
        <link href="/static/css/main.css" rel="stylesheet">
        <script src="https://code.jquery.com/jquery-3.3.1.min.js"></script>
        <script src="https://cdnjs.cloudflare.com/ajax/libs/socket.io/3.1.3/socket.io.js" integrity="sha512-2RDFHqfLZW8IhPRvQYmK9bTLfj/hddxGXQAred2wNZGkrKQkLGj8RCkXfRJPHlDerdHHIzTFaahq4s/P4V6Qig==" crossorigin="anonymous"></script>
        <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.0.0-beta3/dist/js/bootstrap.bundle.min.js" integrity="sha384-JEW9xMcG8R+pH31jmWH6WWP0WintQrMb4s7ZOdauHnUtxwoG2vI5DkLtS3qm9Ekf" crossorigin="anonymous"></script>
        <script src="https://cdn.jsdelivr.net/npm/clipboard@2.0.8/dist/clipboard.min.js"></script>
    </head>
    <body>
        <div class="container content">
            <div class="row h-100 justify-content-center align-items-center">
                <div class="col w-25 currency_table">
                    <div class="row text-center">
                        <h2><%= user.nick %></h2>
                    </div>
                </div>
            </div>
            <div id="snackbar"></div>
            <div class="footer">
                <div class="footer-item">
                    <a href="/ranking">랭킹</a>
                </div>
                <div class="footer-item">
                    <a href="#" class="share" data-clipboard-text="https://coin.ltra.cc/user/<%= user.nick %>">공유하기</a>
                </div>
            </div>
        </div>
    </body>
    <script>
        $(() => {
            var clipboard = new ClipboardJS('.share')
            clipboard.on('success', (e) => {
                Snackbar("복사 완료")
                console.log(e)
            })
            clipboard.on('error', (e) => {
                Snackbar("복사 실패")
                console.log(e);
            })

            function Snackbar(msg) {
                var x = document.getElementById("snackbar");
                x.className = "show";
                x.textContent = msg;
                setTimeout(function () { x.className = x.className.replace("show", ""); }, 3000);
            }

            var wallet = {}

            function uuidv4() {
                return ([1e7]+-1e3+-4e3+-8e3+-1e11).replace(/[018]/g, c =>
                    (c ^ crypto.getRandomValues(new Uint8Array(1))[0] & 15 >> c / 4).toString(16)
                )
            }

            const options = {method: 'GET'};

            var preferedMarket = {}
            function setPreferedMarket(markets) {
                let mkt = {
                    "BTC": [], "KRW": [], "USDT": []
                }
                markets.forEach((market) => {
                    mktCode = market.market.substr(0, market.market.indexOf("-"))
                    mktData = market.market.substr(market.market.indexOf("-") + 1)
                    mkt[mktCode].push(mktData)
                })

                mkt.KRW.forEach((item) => {
                    mkt.BTC = mkt.BTC.filter((x) => x !== item)
                    mkt.USDT = mkt.USDT.filter((x) => x !== item)

                    preferedMarket[item] = "KRW"
                })

                mkt.BTC.forEach((item) => {
                    preferedMarket[item] = "BTC"
                })

                mkt.USDT.forEach((item) => {
                    preferedMarket[item] = "USDT"
                })
            }

            fetch('https://api.upbit.com/v1/market/all?isDetails=false', options)
            .then(response => response.text())
            .then(response => setPreferedMarket(JSON.parse(response)))
            .catch(err => console.error(err));

            const upbitBTC = new WebSocket("wss://api.upbit.com/websocket/v1")
            let Exchange = {}
            upbitBTC.onopen = () => {
                upbitBTC.send(JSON.stringify([{ "ticket": uuidv4() },
                    {
                        "type": "ticker",
                        "codes": [ "KRW-BTC" ],
                    }]))
            }
            upbitBTC.onmessage = (evt) => {
                const reader = new FileReader()
                reader.onload = () => {
                    const tick = JSON.parse(reader.result)
                    Exchange[tick.code.substr(tick.code.indexOf("-")+1)] = tick.trade_price
                }
                reader.readAsText(evt.data)
            }

            const upbit = new WebSocket("wss://api.upbit.com/websocket/v1")
            
            const socket = io()
            socket.on('wallet', (cwallet) => {
                wallet = {}
                ccwallet = cwallet.filter(item => item.currency != "KRW")
                // if(Math.floor(Math.random() * 2) % 2)
                    // cwallet = cwallet.filter(item => item.currency != "DOGE")
                    ccwallet.forEach((item) => {
                    wallet[item.currency] = {
                        avg_buy_price: item.avg_buy_price,
                        balance: parseFloat(item.balance) + parseFloat(item.locked),
                    }
                })
                upbit.send(JSON.stringify([
                    { "ticket": uuidv4() },
                    {
                        "type": "ticker",
                        "codes": Object.keys(wallet).map((item) => preferedMarket[item] + "-" + item)
                    }
                ]))

                $("div[class*=currency-]").map((_, item) => {
                    flag = false
                    Object.keys(wallet).map((key) => {
                        if($(item).hasClass(`currency-${key}`)) {
                            flag = true
                        }
                    })
                    if(!flag)
                        $(item).remove()
                })

                const krw = cwallet.filter(item => item.currency == "KRW")[0]
                const amount = Math.floor(parseFloat(krw.balance) + parseFloat(krw.locked))

                if($(".KRW").length === 0) {
                    $(".currency_table").append(`
                    <div class="row currency KRW">
                        <div class="row">
                            <div class="col w-25 text-end">
                                <span class="code">KRW</span>
                            </div>
                            <div class="col w-25 text-end">
                                <span class="profit">${amount}</span>
                            </div>
                            <div class="col w-25 text-start">
                            </div>
                        </div>
                    </div>
                    `)
                } else {
                    $(".KRW").html(`
                    <div class="row">
                        <div class="col w-25 text-end">
                            <span class="code">KRW</span>
                        </div>
                        <div class="col w-25 text-end">
                            <span class="profit">${amount}</span>
                        </div>
                        <div class="col w-25 text-start">
                        </div>
                    </div>
                    `)
                }
                
            })

            upbit.onmessage = (evt) => {
                const reader = new FileReader()
                reader.onload = () => {
                    const tick = JSON.parse(reader.result)
                    var exch = tick.code.substr(0, tick.code.indexOf("-"))
                    var code = tick.code.substr(tick.code.indexOf("-")+1)
                    var price = tick.trade_price

                    if(wallet[code] === undefined)
                        return

                    if(exch === "BTC")
                        price *= Exchange["BTC"]

                    var startPrice = wallet[code].avg_buy_price * wallet[code].balance
                    var afterPrice = price * wallet[code].balance

                    var profit = Math.round(afterPrice - startPrice)
                    var percentage = afterPrice > startPrice ? (afterPrice / startPrice) * 100 - 100 : -(1 - afterPrice / startPrice) * 100
                    percentage = percentage.toFixed(2)

                    if(percentage > 0) {
                        color = "red"
                    } else {
                        color = "blue"
                    }

                    if($(`.currency-${code}`).length !== 0) {
                        $(`.currency-${code}`).html(`
                        <div class="row">
                            <div class="col w-25 text-end">
                                <span class="code">${code}</span>
                            </div>
                            <div class="col w-25 text-end">
                                <span class="profit">${profit}</span>
                            </div>
                            <div class="col w-25 text-start">
                                <span class="${color}">(${percentage}%)</span>
                            </div>
                        </div>
                        `)
                    } else {
                        if($(".donation").length !== 0) {
                            $(".donation").remove()
                        }

                        $(".currency_table").append(`
                        <div class="row currency currency-${code}">
                            <div class="row">
                                <div class="col w-25 text-end">
                                    <span class="code">${code}</span>
                                </div>
                                <div class="col w-25 text-end">
                                    <span class="profit">${profit}</span>
                                </div>
                                <div class="col w-25 text-start">
                                    <span class="${color}">(${percentage}%)</span>
                                </div>
                            </div>
                        </div>
                        `)

                        $(".currency_table").append(`
                        <div class="row donation" style="padding-top:50px;">
                            <div class="text-center">
                                <h3>Donation</h3>
                            </div>
                            <div class="text-center">
                                <img src="/static/images/BTC.svg" width="32" height="32"> 39Fsbw3dXUbuXyQXdc6oM7z5SvvAkkRcwf
                            </div>
                            <div class="text-center">
                                <img src="/static/images/MBL.png" widht="32" height="32"> ANXZTXH7rV94rAC3yYmNs6zYeFzTHaKsFT
                            </div>
                        </div>
                        `)
                    }
                }
                reader.readAsText(evt.data)
            }

            socket.on('error', () => {
                alert("올바른 Access/Secret key를 입력해주세요.")
                location = "/"
            })
            
            setInterval(() => {
                socket.emit('wallet', {
                    nick:"<%= user.nick %>"
                })
            }, 1000)
        })
    </script>
</html>