<html>

<head>
    <title>Kimchi premium - coin.ltra.cc</title>
    <meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <meta property="og:title" content="Wallet - coin.ltra.cc" />
    <meta property="og:url" content="https://coin.ltra.cc/kimchi" />
    <meta property="og:image" content="/static/images/banner.png" />
    <meta property="og:description" content="Kimchi premium" />
    <link rel="preconnect" href="https://fonts.gstatic.com">
    <link href="https://fonts.googleapis.com/css2?family=Raleway:wght@500&family=Ubuntu:wght@500&display=swap"
        rel="stylesheet">
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.0.0-beta3/dist/css/bootstrap.min.css" rel="stylesheet"
        integrity="sha384-eOJMYsd53ii+scO/bJGFsiCZc+5NDVN2yr8+0RDqr0Ql0h+rP48ckxlpbzKgwra6" crossorigin="anonymous">
    <link href="/static/css/main.css" rel="stylesheet">
    <script src="https://code.jquery.com/jquery-3.3.1.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/socket.io/3.1.3/socket.io.js"
        integrity="sha512-2RDFHqfLZW8IhPRvQYmK9bTLfj/hddxGXQAred2wNZGkrKQkLGj8RCkXfRJPHlDerdHHIzTFaahq4s/P4V6Qig=="
        crossorigin="anonymous"></script>
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.0.0-beta3/dist/js/bootstrap.bundle.min.js"
        integrity="sha384-JEW9xMcG8R+pH31jmWH6WWP0WintQrMb4s7ZOdauHnUtxwoG2vI5DkLtS3qm9Ekf"
        crossorigin="anonymous"></script>
    <script src="https://cdn.jsdelivr.net/npm/clipboard@2.0.8/dist/clipboard.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/chart.js@2.9.4/dist/Chart.min.js"></script>
</head>

<body>
    <div class="container content">
        <div class="row h-100 justify-content-center align-items-center">
            <div class="col w-25 currency_table">
                <div class="row text-center">
                    <h2>김프</h2>
                </div>
                <div class="row align-items-center" style="padding-bottom: 50px;">
                    <div class="col"></div>
                    <div class="col">
                        <table class="table table-sm table-responsive text-light text-center">
                            <thead>
                                <tr>
                                    <th scope="col">Code</th>
                                    <th scope="col">Upbit</th>
                                    <th scope="col">Binance</th>
                                    <th scope="col">Premium</th>
                                </tr>
                            </thead>
                            <tbody id="permium-list">
                                <tr>
                                    <td colspan="4">로딩중입니다...</td>
                                </tr>
                            </tbody>
                        </table>
                    </div>
                    <div class="col"></div>
                </div>
            </div>
        </div>

        <div id="snackbar"></div>
        <div class="footer">
            <div class="footer-item">
                <a href="/">메인</a>
            </div>
            <div class="footer-item">
                <a href="/ranking">랭킹</a>
            </div>
            <div class="footer-item">
                <a href="/kimchi">김프</a>
            </div>
            <div class="footer-item">
                <a href="#" class="share" data-clipboard-text="https://coin.ltra.cc/kimchi">공유하기</a>
            </div>
        </div>
    </div>
</body>
<script>
    $(() => {
        var clipboard = new ClipboardJS('.share')
        clipboard.on('success', (e) => {
            Snackbar("복사 완료")
            console.log(e)
        })
        clipboard.on('error', (e) => {
            Snackbar("복사 실패")
            console.log(e);
        })

        function Snackbar(msg) {
            var x = document.getElementById("snackbar");
            x.className = "show";
            x.textContent = msg;
            setTimeout(function () { x.className = x.className.replace("show", ""); }, 3000);
        }
    })

    function uuidv4() {
        return ([1e7] + -1e3 + -4e3 + -8e3 + -1e11).replace(/[018]/g, c =>
            (c ^ crypto.getRandomValues(new Uint8Array(1))[0] & 15 >> c / 4).toString(16)
        )
    }

    function getUpbitAvailMarkets() {
        const options = { method: 'GET' };
        return fetch('https://api.upbit.com/v1/market/all?isDetails=false', options)
            .then(response => response.text())
            .then(response => JSON.parse(response))
            .then(response => response.filter((item) => item.market.substr(0, item.market.indexOf("-")) === "KRW"))
    }

    function setUpbitMarkets(data) {
        data.forEach((item) => {
            mktData = item.market.substr(item.market.indexOf("-") + 1)
            markets[mktData] = { upbit: item.market }
        })
        return markets
    }

    function getExchangeRate() {
        return fetch("https://api.exchangeratesapi.io/latest?base=USD")
            .then(response => response.text())
            .then(response => JSON.parse(response))
            .then(response => parseFloat(response["rates"]["KRW"]))
    }

    function setBinanceMarkets(data) {
        if (data.id)
            return

        data = data.filter(item => item.s.substr(-4) === "BUSD")
        data.forEach(item => {
            const code = item.s.slice(0, -4)
            const price = item.c
            if (markets[code] !== undefined)
                markets[code].binance = Math.floor(price * exchRate)
        })
    }

    function requestUpbitTicker(markets) {
        Upbit.send(JSON.stringify([{ "ticket": uuidv4() }, { "type": "ticker", "codes": Object.keys(markets).map((item) => markets[item].upbit) }]))
    }

    function requestBinanceTicker() {
        Binance.send(JSON.stringify({
            "method": "SUBSCRIBE",
            "params": ["!ticker@arr"],
            "id": 1
        }))
    }

    function makePremiumList(markets) {
        Object.keys(markets).forEach(code => {
            if(markets[code].upbit && markets[code].binance) {
                const market = markets[code]
                let premium = (market.upbit - market.binance) / market.upbit * 100
                if(premium >= 100) {
                    premium -= 100
                }
                
                let color = "blue"
                if(premium > 0) {
                    color = "red"
                }

                if($(`#${code}`).length == 0) {
                    $("#permium-list").append(`
                        <tr id="${code}">
                            <td>${code}</td>
                            <td id="upbit-${code}">${market.upbit.toLocaleString()}</td>
                            <td id="binance-${code}">${market.binance.toLocaleString()}</td>
                            <td id="premium-${code}" class="${color}">${premium.toFixed(2)}%</td>
                        </tr>
                    `)
                } else {
                    $(`#upbit-${code}`).text(market.upbit.toLocaleString())
                    $(`#binance-${code}`).text(market.binance.toLocaleString())
                    $(`#premium-${code}`).text(premium.toFixed(2) + "%")
                }
            }
        })
    }

    function randomString(n) {
        const table = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijkklmnopqrstuvwxyz0123456789"
        let result = ""
        for (let i = 0; i < n; i++) {
            result += table[Math.floor(Math.random() * table.length)]
        }
        return result
    }

    let markets = {}
    let exchRate = 0.0
    const Binance = new WebSocket("wss://stream.binance.com:9443/ws/" + randomString(10))
    const Upbit = new WebSocket("wss://api.upbit.com/websocket/v1")

    Upbit.onopen = () => {
        Binance.onopen = () => {
            getUpbitAvailMarkets()
                .then(response => setUpbitMarkets(response))
                .then(market => requestUpbitTicker(market))
                .then(_ => requestBinanceTicker())
                .then(_ => getExchangeRate())
                .then(rate => exchRate = rate)
                .catch(err => console.error(err))
        }
    }

    Upbit.onmessage = (evt) => {
        const reader = new FileReader()
        reader.onload = () => {
            const tick = JSON.parse(reader.result)
            const code = tick.code.substr(tick.code.indexOf("-") + 1)

            markets[code].upbit = tick.trade_price
        }

        reader.readAsText(evt.data)
    }

    Binance.onmessage = (evt) => {
        const ticks = JSON.parse(evt.data)
        setBinanceMarkets(ticks)
    }

    $("#permium-list").empty()

    setInterval(() => {
        makePremiumList(markets)
    }, 1000)

</script>

</html>