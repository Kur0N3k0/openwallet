<%-include('header')%>
<body>
    <div class="container content">
        <div class="row h-100 justify-content-center align-items-center">
            <div class="col w-25 currency_table">
                <div class="row text-center">
                    <h2>김프</h2>
                </div>
                <div class="row">
                    <div class="col"></div>
                    <div class="col text-end">
                        <input type="button" class="btn btn-dark" value="옵션" onclick="optionToggle()">
                    </div>
                    <div class="col"></div>
                </div>
                <div class="row alarm-option">
                    <div class="col"></div>
                    <div class="col">
                        <input type="checkbox" id="upbit-setup">
                        <label for="upbit-setup">Upbit가격설정</label>
                        <div class="input-group mb-3">
                            <button class="btn btn-outline-secondary dropdown-toggle" type="button" data-bs-toggle="dropdown" aria-expanded="false">Market</button>
                            <ul class="dropdown-menu" id="upbit-markets">
                            </ul>
                            <input type="number" class="form-control" id="upbit-price" aria-label="100000">
                        </div>
                        <input type="checkbox" id="binance-setup">
                        <label for="binance-setup">Binance가격설정</label>
                        <div class="input-group mb-3">
                            <button class="btn btn-outline-secondary dropdown-toggle" type="button" data-bs-toggle="dropdown" aria-expanded="false">Market</button>
                            <ul class="dropdown-menu" id="binance-markets">
                                <li><a class="dropdown-item" href="#">Action</a></li>
                                <li><a class="dropdown-item" href="#">Another action</a></li>
                                <li><a class="dropdown-item" href="#">Something else here</a></li>
                                <li><a class="dropdown-item" href="#">Separated link</a></li>
                            </ul>
                            <input type="number" class="form-control" id="binance-price" aria-label="100000">
                        </div>
                        <input type="checkbox" id="premium-setup">
                        <label for="premium-setup">김프설정</label>
                        <div class="input-group mb-3">
                            <input type="number" class="form-control percent" id="premium-price" aria-label="100000" placeholder="-5%">
                        </div>
                    </div>
                    <div class="col"></div>
                </div>
                <div class="row">
                    <div class="col"></div>
                    <div class="col">
                        알림 목록
                    </div>
                    <div class="col"></div>
                </div>
                <div class="row">
                    <div class="col"></div>
                    <div class="col">
                        <div class="row">

                        </div>
                    </div>
                    <div class="col"></div>
                </div>
                <div class="row" style="padding-bottom: 50px;">
                    <div class="col"></div>
                    <div class="col">
                        <table class="table table-sm table-responsive text-light text-center">
                            <thead>
                                <tr>
                                    <th scope="col">Code</th>
                                    <th scope="col">Upbit</th>
                                    <th scope="col">Binance</th>
                                    <th scope="col">Premium</th>
                                </tr>
                            </thead>
                            <tbody id="permium-list">
                                <tr>
                                    <td colspan="4">로딩중입니다...</td>
                                </tr>
                            </tbody>
                        </table>
                    </div>
                    <div class="col"></div>
                </div>
            </div>
        </div>
<%-include('footer')%>
<script>
    function uuidv4() {
        return ([1e7] + -1e3 + -4e3 + -8e3 + -1e11).replace(/[018]/g, c =>
            (c ^ crypto.getRandomValues(new Uint8Array(1))[0] & 15 >> c / 4).toString(16)
        )
    }

    function getUpbitAvailMarkets() {
        const options = { method: 'GET' };
        return fetch('https://api.upbit.com/v1/market/all?isDetails=false', options)
            .then(response => response.text())
            .then(response => JSON.parse(response))
            .then(response => response.filter((item) => item.market.substr(0, item.market.indexOf("-")) === "KRW"))
    }

    function setUpbitMarkets(data) {
        data.forEach((item) => {
            mktData = item.market.substr(item.market.indexOf("-") + 1)
            markets[mktData] = { upbit: item.market, korean_name: item.korean_name }
            $("#upbit-markets").append(`<li><a class="dropdown-item" href="#">${mktData}</a></li>`)
        })
        return markets
    }

    function getExchangeRate() {
        return fetch("https://api.freecurrencyapi.com/v1/latest?apikey=sgiPfh4j3aXFR3l2CnjWqdKQzxpqGn9pX5b3CUsz&base_currency=USD&currencies=KRW")
            .then(response => response.text())
            .then(response => JSON.parse(response))
            .then(response => parseFloat(response["data"]["KRW"]))
    }

    function setBinanceMarkets(data) {
        if (data.id)
            return

        data = data.filter(item => item.s.substr(-4) === "BUSD")
        data.forEach(item => {
            const code = item.s.slice(0, -4)
            const price = item.c
            if (markets[code] !== undefined)
                markets[code].binance = Math.floor(price * exchRate)
        })
    }

    function requestUpbitTicker(markets) {
        Upbit.send(JSON.stringify([{ "ticket": uuidv4() }, { "type": "ticker", "codes": Object.keys(markets).map((item) => markets[item].upbit) }]))
    }

    function requestBinanceTicker() {
        Binance.send(JSON.stringify({
            "method": "SUBSCRIBE",
            "params": ["!ticker@arr"],
            "id": 1
        }))
    }

    function makePremiumList(markets) {
        Object.keys(markets).forEach(code => {
            if(markets[code].upbit && markets[code].binance) {
                const market = markets[code]
                let premium = (market.upbit - market.binance) / market.upbit * 100
                if(premium >= 100) {
                    premium -= 100
                }

                if(premium < 0) {
                    let notification = new Notification("역프발생", { body: `${market.korean_name}(${code})` })
                    setTimeout(setTimeout(notification.close.bind(notification), 4000))
                }
                
                let color = "blue"
                if(premium > 0) {
                    color = "red"
                }

                if($(`#${code}`).length == 0) {
                    $("#permium-list").append(`
                        <tr id="${code}">
                            <td>${code}</td>
                            <td id="upbit-${code}">${market.upbit.toLocaleString()}</td>
                            <td id="binance-${code}">${market.binance.toLocaleString()}</td>
                            <td id="premium-${code}" class="${color}">${premium.toFixed(2)}%</td>
                        </tr>
                    `)
                } else {
                    $(`#upbit-${code}`).text(market.upbit.toLocaleString())
                    $(`#binance-${code}`).text(market.binance.toLocaleString())
                    $(`#premium-${code}`).text(premium.toFixed(2) + "%")
                }
            }
        })
    }

    function randomString(n) {
        const table = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijkklmnopqrstuvwxyz0123456789"
        let result = ""
        for (let i = 0; i < n; i++) {
            result += table[Math.floor(Math.random() * table.length)]
        }
        return result
    }

    Notification.requestPermission()
        .then(permission => Notification.permission)

    let markets = {}
    let exchRate = 0.0
    const Binance = new WebSocket("wss://stream.binance.com:9443/ws/" + randomString(10))
    const Upbit = new WebSocket("wss://api.upbit.com/websocket/v1")

    Upbit.onopen = () => {
        Binance.onopen = () => {
            getUpbitAvailMarkets()
                .then(response => setUpbitMarkets(response))
                .then(market => requestUpbitTicker(market))
                .then(_ => requestBinanceTicker())
                .then(_ => getExchangeRate())
                .then(rate => exchRate = rate)
                .catch(err => console.error(err))
        }
    }

    Upbit.onmessage = (evt) => {
        const reader = new FileReader()
        reader.onload = () => {
            const tick = JSON.parse(reader.result)
            const code = tick.code.substr(tick.code.indexOf("-") + 1)

            markets[code].upbit = tick.trade_price
        }

        reader.readAsText(evt.data)
    }

    Binance.onmessage = (evt) => {
        const ticks = JSON.parse(evt.data)
        setBinanceMarkets(ticks)
    }

    $("#permium-list").empty()

    setInterval(() => {
        makePremiumList(markets)
    }, 1000)

</script>

</html>